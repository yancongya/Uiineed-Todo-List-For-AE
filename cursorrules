# UINeed-Todo-AE 开发规范

## 项目结构
### 初始阶段结构
- index.html - 主HTML文件(从原项目复制)
- css/ - CSS样式文件(从原项目复制)
- js/ - 前端JavaScript(从原项目复制)
  - js/vue.js - Vue.js库
- jsx/ - ExtendScript代码
  - jsx/index.jsx - ExtendScript入口文件

### 最终目标结构
- src/js/ - CEP面板JavaScript代码
  - src/js/lib/ - 工具库函数和公共函数
  - src/js/components/ - vue2 UI组件
  - src/js/hooks/ - 自定义vue2 Hooks
  - src/js/contexts/ - vue2上下文管理
  - src/js/utils/ - 工具函数
  - src/js/styles/ - 全局样式定义
  - src/js/main.ts - 主入口文件
- src/jsx/ - ExtendScript代码
  - src/jsx/utils/ - ExtendScript工具函数
  - src/jsx/ae/ - AE特定操作函数
  - src/jsx/data/ - 数据操作相关函数
  - src/jsx/index.ts - ExtendScript入口文件
- src/shared/ - 共享类型和常量
  - src/shared/universals.ts - 共享类型定义
  - src/shared/constants.ts - 共享常量
- src/assets/ - 资源文件
  - src/assets/icons/ - 图标资源
  - src/assets/fonts/ - 字体资源

## 开发阶段
### 第一阶段：项目初始化
- 直接复制原有HTML、CSS和JS文件
- 添加最简单的CEP配置
- 保持原有UI和功能基本不变
- 命名规范和代码风格与原项目保持一致

### 第二阶段：添加AE功能
- 实现基本的ExtendScript功能
- 实现前端和ExtendScript通信
- 将localStorage替换为JSON文件存储

### 第三阶段：逐步优化
- 逐步引入TypeScript
- 逐步将代码结构调整为标准CEP项目结构
- 改进UI设计符合Adobe风格
- 完善AE集成功能

## 命名规范
- 保持简单，初期与原项目保持一致
- 后期逐步采用规范的命名风格：
  - 组件文件: PascalCase.tsx (例如: TodoItem.tsx)
  - 工具函数文件: camelCase.ts (例如: todoUtils.ts)
  - 样式文件: ComponentName.scss (例如: TodoItem.scss)

## 代码规范
- 初期保持与原项目一致的JavaScript代码
- 后期逐步引入TypeScript和相关规范:
  - 添加类型声明
  - 使用接口定义对象结构
  - 添加JSDoc注释

## 通信规范
- 使用CEP基本通信机制:
  - UI→ExtendScript: csInterface.evalScript
  - 传递复杂对象时使用JSON.stringify和encodeURIComponent
- 示例通信模式:
  ```javascript
  // 从前端调用ExtendScript
  function saveTodos(todos) {
    var todosStr = JSON.stringify(todos);
    csInterface.evalScript('$.todo.saveTodos("' + encodeURIComponent(todosStr) + '")');
  }

  // ExtendScript代码
  $.todo = {
    saveTodos: function(todosStr) {
      var todos = JSON.parse(decodeURIComponent(todosStr));
      // 保存到文件
      return "success";
    }
  };
  ```

## 数据存储
- 初期继续使用localStorage (方便调试)
- 第二阶段转为JSON文件存储:
  - 主数据文件: todos.json (包含所有待办事项)
  - 存储位置: 用户文档/UINeed/TodoList/
    - Windows: %USERPROFILE%\Documents\UINeed\TodoList\
    - macOS: ~/Documents/UINeed/TodoList\

## AE集成
- 基础集成:
  - 将待办事项创建为文本图层
  - 使用不同颜色区分已完成和未完成项
- 后期添加高级功能:
  - 创建专用待办事项合成
  - 添加可视化进度条
  - 提供更多的自定义选项

## UI组件
- 初期保持原项目的UI风格
- 后期逐步调整为Adobe Spectrum设计风格:
  - 使用与AE一致的UI元素
  - 支持明暗主题
  - 改进键盘导航和可访问性

## 测试与调试
- 使用简单的调试方法:
  - 在ExtendScript中使用$.writeln()输出调试信息
  - 启用Chrome调试CEP扩展(localhost:8851)
- 后期增加更完善的测试机制

## 发布与部署
- 初期使用简单的手动安装方式
- 后期实现完整的构建和打包流程:
  - 开发构建: npm run build
  - 生产构建: npm run build:prod
  - ZXP打包: npm run zxp 